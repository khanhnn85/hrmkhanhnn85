// D·ªØ li·ªáu m·∫´u cho vi·ªác t·ª± ƒë·ªông ƒëi·ªÅn form
export const sampleCandidates = [
  {
    full_name: "Nguy·ªÖn VƒÉn An",
    email: "nguyenvanan@gmail.com",
    phone: "0912345678",
    position_title: "Backend Developer"
  },
  {
    full_name: "Tr·∫ßn Th·ªã B√¨nh",
    email: "tranthibinh@gmail.com", 
    phone: "0987654321",
    position_title: "Frontend Developer"
  },
  {
    full_name: "L√™ Ho√†ng C∆∞·ªùng",
    email: "lehoangcuong@gmail.com",
    phone: "0901234567",
    position_title: "HR Generalist"
  },
  {
    full_name: "Ph·∫°m Th·ªã Dung",
    email: "phamthidung@gmail.com",
    phone: "0976543210",
    position_title: "Backend Developer"
  },
  {
    full_name: "Ho√†ng VƒÉn Em",
    email: "hoangvanem@gmail.com",
    phone: "0965432109",
    position_title: "Frontend Developer"
  }
];

// T·∫°o file CV gi·∫£ l·∫≠p
export const createMockCVFile = (candidateName: string): File => {
  const content = `
CV - ${candidateName}

TH√îNG TIN C√Å NH√ÇN:
- H·ªç v√† t√™n: ${candidateName}
- Ng√†y sinh: 01/01/1990
- ƒê·ªãa ch·ªâ: H√† N·ªôi, Vi·ªát Nam

KINH NGHI·ªÜM L√ÄM VI·ªÜC:
- 2020-2023: Developer t·∫°i C√¥ng ty ABC
- 2018-2020: Junior Developer t·∫°i C√¥ng ty XYZ

K·ª∏ NƒÇNG:
- JavaScript, TypeScript
- React, Node.js
- Database: PostgreSQL, MongoDB

H·ªåC V·∫§N:
- 2014-2018: C·ª≠ nh√¢n C√¥ng ngh·ªá th√¥ng tin - ƒê·∫°i h·ªçc B√°ch Khoa H√† N·ªôi
`;

  const blob = new Blob([content], { type: 'application/pdf' });
  return new File([blob], `CV_${candidateName.replace(/\s+/g, '_')}.pdf`, {
    type: 'application/pdf'
  });
};

// H√†m delay ƒë·ªÉ m√¥ ph·ªèng thao t√°c ng∆∞·ªùi d√πng
export const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// H√†m ki·ªÉm tra v√† ch·ªù element xu·∫•t hi·ªán
export const waitForElement = async (selector: string, timeout: number = 10000): Promise<Element | null> => {
  const startTime = Date.now();
  
  while (Date.now() - startTime < timeout) {
    const element = document.querySelector(selector);
    if (element) {
      return element;
    }
    await delay(100);
  }
  
  console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y element: ${selector} sau ${timeout}ms`);
  return null;
};

// H√†m t·ª± ƒë·ªông s·ª≠a l·ªói validation
export const fixValidationErrors = async (): Promise<boolean> => {
  console.log('üîß ƒêang ki·ªÉm tra v√† s·ª≠a l·ªói validation...');
  
  let hasErrors = false;
  
  // Ki·ªÉm tra l·ªói email
  const emailError = document.querySelector('input[name="email"] + p.text-red-600');
  if (emailError) {
    console.log('üîß S·ª≠a l·ªói email...');
    const emailInput = document.querySelector('input[name="email"]') as HTMLInputElement;
    if (emailInput) {
      const randomNum = Math.floor(Math.random() * 1000);
      emailInput.value = `user${randomNum}@example.com`;
      emailInput.dispatchEvent(new Event('input', { bubbles: true }));
      emailInput.dispatchEvent(new Event('change', { bubbles: true }));
      hasErrors = true;
    }
  }
  
  // Ki·ªÉm tra l·ªói s·ªë ƒëi·ªán tho·∫°i
  const phoneError = document.querySelector('input[name="phone"] + p.text-red-600');
  if (phoneError) {
    console.log('üîß S·ª≠a l·ªói s·ªë ƒëi·ªán tho·∫°i...');
    const phoneInput = document.querySelector('input[name="phone"]') as HTMLInputElement;
    if (phoneInput) {
      const randomPhone = '09' + Math.floor(Math.random() * 100000000).toString().padStart(8, '0');
      phoneInput.value = randomPhone;
      phoneInput.dispatchEvent(new Event('input', { bubbles: true }));
      phoneInput.dispatchEvent(new Event('change', { bubbles: true }));
      hasErrors = true;
    }
  }
  
  // Ki·ªÉm tra l·ªói h·ªç t√™n
  const nameError = document.querySelector('input[name="full_name"] + p.text-red-600');
  if (nameError) {
    console.log('üîß S·ª≠a l·ªói h·ªç t√™n...');
    const nameInput = document.querySelector('input[name="full_name"]') as HTMLInputElement;
    if (nameInput && nameInput.value.length < 2) {
      nameInput.value = 'Nguy·ªÖn VƒÉn Test';
      nameInput.dispatchEvent(new Event('input', { bubbles: true }));
      nameInput.dispatchEvent(new Event('change', { bubbles: true }));
      hasErrors = true;
    }
  }
  
  // Ki·ªÉm tra l·ªói v·ªã tr√≠
  const positionError = document.querySelector('select[name="applied_position_id"] + p.text-red-600');
  if (positionError) {
    console.log('üîß S·ª≠a l·ªói v·ªã tr√≠...');
    const positionSelect = document.querySelector('select[name="applied_position_id"]') as HTMLSelectElement;
    if (positionSelect && positionSelect.options.length > 1) {
      positionSelect.selectedIndex = 1; // Ch·ªçn option ƒë·∫ßu ti√™n (kh√¥ng ph·∫£i "Ch·ªçn v·ªã tr√≠")
      positionSelect.dispatchEvent(new Event('change', { bubbles: true }));
      hasErrors = true;
    }
  }
  
  if (hasErrors) {
    await delay(1000); // Ch·ªù validation update
  }
  
  return hasErrors;
};

// H√†m t·ª± ƒë·ªông ƒëi·ªÅn form v·ªõi x·ª≠ l√Ω l·ªói
export const autoFillForm = async (candidateData: typeof sampleCandidates[0], positions: any[], retryCount: number = 0): Promise<boolean> => {
  try {
    console.log(`ü§ñ ƒêang ƒëi·ªÅn th√¥ng tin cho: ${candidateData.full_name} (L·∫ßn th·ª≠: ${retryCount + 1})`);

    // Ch·ªù form load
    const fullNameInput = await waitForElement('input[name="full_name"]') as HTMLInputElement;
    if (!fullNameInput) {
      throw new Error('Kh√¥ng t√¨m th·∫•y form');
    }

    // T√¨m v·ªã tr√≠ ph√π h·ª£p
    const targetPosition = positions.find(pos => 
      pos.title.toLowerCase().includes(candidateData.position_title.toLowerCase())
    );

    if (!targetPosition) {
      console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y v·ªã tr√≠: ${candidateData.position_title}, s·∫Ω ch·ªçn v·ªã tr√≠ ƒë·∫ßu ti√™n`);
    }

    // L·∫•y c√°c elements
    const emailInput = await waitForElement('input[name="email"]') as HTMLInputElement;
    const phoneInput = await waitForElement('input[name="phone"]') as HTMLInputElement;
    const positionSelect = await waitForElement('select[name="applied_position_id"]') as HTMLSelectElement;
    const fileInput = await waitForElement('input[type="file"]') as HTMLInputElement;

    if (!emailInput || !phoneInput || !positionSelect || !fileInput) {
      throw new Error('Kh√¥ng t√¨m th·∫•y ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng form');
    }

    // ƒêi·ªÅn th√¥ng tin v·ªõi animation
    console.log('üìù ƒêi·ªÅn h·ªç t√™n...');
    fullNameInput.focus();
    await delay(300);
    fullNameInput.value = '';
    for (let i = 0; i < candidateData.full_name.length; i++) {
      fullNameInput.value += candidateData.full_name[i];
      fullNameInput.dispatchEvent(new Event('input', { bubbles: true }));
      await delay(50);
    }
    fullNameInput.dispatchEvent(new Event('change', { bubbles: true }));

    await delay(500);

    console.log('üìß ƒêi·ªÅn email...');
    emailInput.focus();
    await delay(300);
    emailInput.value = '';
    // Th√™m timestamp ƒë·ªÉ tr√°nh tr√πng email
    const uniqueEmail = candidateData.email.replace('@', `${Date.now()}@`);
    for (let i = 0; i < uniqueEmail.length; i++) {
      emailInput.value += uniqueEmail[i];
      emailInput.dispatchEvent(new Event('input', { bubbles: true }));
      await delay(30);
    }
    emailInput.dispatchEvent(new Event('change', { bubbles: true }));

    await delay(500);

    console.log('üì± ƒêi·ªÅn s·ªë ƒëi·ªán tho·∫°i...');
    phoneInput.focus();
    await delay(300);
    phoneInput.value = '';
    for (let i = 0; i < candidateData.phone.length; i++) {
      phoneInput.value += candidateData.phone[i];
      phoneInput.dispatchEvent(new Event('input', { bubbles: true }));
      await delay(50);
    }
    phoneInput.dispatchEvent(new Event('change', { bubbles: true }));

    await delay(500);

    console.log('üíº Ch·ªçn v·ªã tr√≠...');
    positionSelect.focus();
    await delay(300);
    if (targetPosition) {
      positionSelect.value = targetPosition.id;
    } else if (positionSelect.options.length > 1) {
      positionSelect.selectedIndex = 1; // Ch·ªçn option ƒë·∫ßu ti√™n
    }
    positionSelect.dispatchEvent(new Event('change', { bubbles: true }));

    await delay(500);

    console.log('üìÑ Upload CV...');
    const cvFile = createMockCVFile(candidateData.full_name);
    const dataTransfer = new DataTransfer();
    dataTransfer.items.add(cvFile);
    fileInput.files = dataTransfer.files;
    fileInput.dispatchEvent(new Event('change', { bubbles: true }));

    await delay(1000);

    // Ki·ªÉm tra v√† s·ª≠a l·ªói validation
    const hasErrors = await fixValidationErrors();
    if (hasErrors) {
      console.log('üîß ƒê√£ s·ª≠a m·ªôt s·ªë l·ªói validation');
      await delay(1000);
    }

    console.log(`‚úÖ ƒê√£ ƒëi·ªÅn xong th√¥ng tin cho: ${candidateData.full_name}`);
    return true;

  } catch (error) {
    console.error(`‚ùå L·ªói khi ƒëi·ªÅn form cho ${candidateData.full_name}:`, error);
    
    // Retry logic
    if (retryCount < 2) {
      console.log(`üîÑ Th·ª≠ l·∫°i l·∫ßn ${retryCount + 2}...`);
      await delay(2000);
      return autoFillForm(candidateData, positions, retryCount + 1);
    }
    
    return false;
  }
};

// H√†m t·ª± ƒë·ªông submit v·ªõi x·ª≠ l√Ω l·ªói
export const autoSubmitForm = async (retryCount: number = 0): Promise<boolean> => {
  try {
    console.log('üöÄ ƒêang submit form...');
    
    const submitButton = await waitForElement('button[type="submit"]') as HTMLButtonElement;
    
    if (!submitButton) {
      throw new Error('Kh√¥ng t√¨m th·∫•y n√∫t submit');
    }

    if (submitButton.disabled) {
      console.warn('‚ö†Ô∏è N√∫t submit ƒëang b·ªã v√¥ hi·ªáu h√≥a, ki·ªÉm tra l·ªói...');
      
      // Th·ª≠ s·ª≠a l·ªói validation
      const hasErrors = await fixValidationErrors();
      if (hasErrors) {
        await delay(1000);
        // Th·ª≠ l·∫°i sau khi s·ª≠a l·ªói
        if (retryCount < 2) {
          return autoSubmitForm(retryCount + 1);
        }
      }
      
      if (submitButton.disabled) {
        throw new Error('N√∫t submit v·∫´n b·ªã v√¥ hi·ªáu h√≥a sau khi s·ª≠a l·ªói');
      }
    }

    // Click submit
    submitButton.click();
    
    // Ch·ªù v√† ki·ªÉm tra k·∫øt qu·∫£
    await delay(3000);
    
    // Ki·ªÉm tra toast th√†nh c√¥ng
    const successToast = document.querySelector('.Toaster__toast--success, [data-sonner-toast][data-type="success"]');
    if (successToast) {
      console.log('‚úÖ Submit th√†nh c√¥ng!');
      return true;
    }
    
    // Ki·ªÉm tra toast l·ªói
    const errorToast = document.querySelector('.Toaster__toast--error, [data-sonner-toast][data-type="error"]');
    if (errorToast) {
      const errorMessage = errorToast.textContent || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      console.error('‚ùå Submit th·∫•t b·∫°i:', errorMessage);
      
      // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ
      if (errorMessage.includes('tr√πng') || errorMessage.includes('duplicate')) {
        console.log('üîß L·ªói tr√πng d·ªØ li·ªáu, s·∫Ω th·ª≠ v·ªõi email kh√°c...');
        const emailInput = document.querySelector('input[name="email"]') as HTMLInputElement;
        if (emailInput) {
          const randomNum = Math.floor(Math.random() * 10000);
          emailInput.value = `user${randomNum}${Date.now()}@example.com`;
          emailInput.dispatchEvent(new Event('input', { bubbles: true }));
          emailInput.dispatchEvent(new Event('change', { bubbles: true }));
          await delay(1000);
          
          if (retryCount < 2) {
            return autoSubmitForm(retryCount + 1);
          }
        }
      }
      
      return false;
    }
    
    // N·∫øu kh√¥ng c√≥ toast n√†o, coi nh∆∞ th√†nh c√¥ng
    console.log('‚úÖ Submit ho√†n t·∫•t (kh√¥ng c√≥ th√¥ng b√°o l·ªói)');
    return true;
    
  } catch (error) {
    console.error('‚ùå L·ªói khi submit form:', error);
    
    if (retryCount < 2) {
      console.log(`üîÑ Th·ª≠ submit l·∫°i l·∫ßn ${retryCount + 2}...`);
      await delay(2000);
      return autoSubmitForm(retryCount + 1);
    }
    
    return false;
  }
};

// H√†m ch·∫°y to√†n b·ªô quy tr√¨nh t·ª± ƒë·ªông v·ªõi x·ª≠ l√Ω l·ªói
export const runAutoFormFiller = async (positions: any[], candidateIndex: number = 0): Promise<void> => {
  if (candidateIndex >= sampleCandidates.length) {
    console.log('üéâ ƒê√£ ho√†n th√†nh t·∫•t c·∫£ ·ª©ng vi√™n m·∫´u!');
    console.log('üìä Th·ªëng k√™:');
    console.log(`   - T·ªïng s·ªë ·ª©ng vi√™n: ${sampleCandidates.length}`);
    console.log(`   - ƒê√£ x·ª≠ l√Ω: ${candidateIndex}`);
    return;
  }

  const candidate = sampleCandidates[candidateIndex];
  console.log(`\nüìù B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ·ª©ng vi√™n ${candidateIndex + 1}/${sampleCandidates.length}: ${candidate.full_name}`);
  console.log('=' .repeat(60));

  try {
    // ƒêi·ªÅn form
    const fillSuccess = await autoFillForm(candidate, positions);
    
    if (!fillSuccess) {
      console.error(`‚ùå Kh√¥ng th·ªÉ ƒëi·ªÅn form cho: ${candidate.full_name}`);
      console.log('‚è≠Ô∏è Chuy·ªÉn sang ·ª©ng vi√™n ti·∫øp theo...');
      await delay(2000);
      return runAutoFormFiller(positions, candidateIndex + 1);
    }

    // Submit form
    const submitSuccess = await autoSubmitForm();
    
    if (submitSuccess) {
      console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng: ${candidate.full_name}`);
      
      // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi x·ª≠ l√Ω ·ª©ng vi√™n ti·∫øp theo
      console.log('‚è≥ Ch·ªù 3 gi√¢y tr∆∞·ªõc khi ti·∫øp t·ª•c...');
      await delay(3000);
      
      // Reload trang ƒë·ªÉ reset form
      console.log('üîÑ Reload trang ƒë·ªÉ reset form...');
      window.location.reload();
      
      // Sau khi reload, ti·∫øp t·ª•c v·ªõi ·ª©ng vi√™n ti·∫øp theo
      setTimeout(() => {
        runAutoFormFiller(positions, candidateIndex + 1);
      }, 3000);
    } else {
      console.error(`‚ùå Kh√¥ng th·ªÉ submit form cho: ${candidate.full_name}`);
      console.log('‚è≠Ô∏è Chuy·ªÉn sang ·ª©ng vi√™n ti·∫øp theo...');
      await delay(2000);
      return runAutoFormFiller(positions, candidateIndex + 1);
    }
    
  } catch (error) {
    console.error(`üí• L·ªói nghi√™m tr·ªçng khi x·ª≠ l√Ω ${candidate.full_name}:`, error);
    console.log('‚è≠Ô∏è Chuy·ªÉn sang ·ª©ng vi√™n ti·∫øp theo...');
    await delay(2000);
    return runAutoFormFiller(positions, candidateIndex + 1);
  }
};

// H√†m d·ª´ng auto fill
export const stopAutoFill = () => {
  console.log('üõë ƒê√£ d·ª´ng auto fill');
  // Clear t·∫•t c·∫£ timeout
  const highestTimeoutId = setTimeout(() => {}, 0);
  for (let i = 0; i < highestTimeoutId; i++) {
    clearTimeout(i);
  }
};

// H√†m ki·ªÉm tra tr·∫°ng th√°i form
export const checkFormStatus = () => {
  console.log('üîç KI·ªÇM TRA TR·∫†NG TH√ÅI FORM:');
  console.log('=' .repeat(40));
  
  const fullNameInput = document.querySelector('input[name="full_name"]') as HTMLInputElement;
  const emailInput = document.querySelector('input[name="email"]') as HTMLInputElement;
  const phoneInput = document.querySelector('input[name="phone"]') as HTMLInputElement;
  const positionSelect = document.querySelector('select[name="applied_position_id"]') as HTMLSelectElement;
  const fileInput = document.querySelector('input[type="file"]') as HTMLInputElement;
  const submitButton = document.querySelector('button[type="submit"]') as HTMLButtonElement;
  
  console.log('üìã C√°c tr∆∞·ªùng form:');
  console.log(`   - H·ªç t√™n: ${fullNameInput ? '‚úÖ' : '‚ùå'} (${fullNameInput?.value || 'tr·ªëng'})`);
  console.log(`   - Email: ${emailInput ? '‚úÖ' : '‚ùå'} (${emailInput?.value || 'tr·ªëng'})`);
  console.log(`   - SƒêT: ${phoneInput ? '‚úÖ' : '‚ùå'} (${phoneInput?.value || 'tr·ªëng'})`);
  console.log(`   - V·ªã tr√≠: ${positionSelect ? '‚úÖ' : '‚ùå'} (${positionSelect?.selectedOptions[0]?.text || 'ch∆∞a ch·ªçn'})`);
  console.log(`   - CV: ${fileInput ? '‚úÖ' : '‚ùå'} (${fileInput?.files?.length ? fileInput.files[0].name : 'ch∆∞a ch·ªçn'})`);
  console.log(`   - N√∫t submit: ${submitButton ? '‚úÖ' : '‚ùå'} (${submitButton?.disabled ? 'v√¥ hi·ªáu h√≥a' : 'c√≥ th·ªÉ click'})`);
  
  // Ki·ªÉm tra l·ªói validation
  const errors = document.querySelectorAll('p.text-red-600');
  if (errors.length > 0) {
    console.log('‚ùå L·ªói validation:');
    errors.forEach((error, index) => {
      console.log(`   ${index + 1}. ${error.textContent}`);
    });
  } else {
    console.log('‚úÖ Kh√¥ng c√≥ l·ªói validation');
  }
};

// Export c√°c h√†m ƒë·ªÉ s·ª≠ d·ª•ng t·ª´ console
(window as any).autoFormFiller = {
  sampleCandidates,
  autoFillForm,
  autoSubmitForm,
  runAutoFormFiller,
  stopAutoFill,
  checkFormStatus,
  createMockCVFile,
  fixValidationErrors
};

console.log('ü§ñ AUTO FORM FILLER LOADED!');
console.log('üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:');
console.log('   - startAutoFill(): B·∫Øt ƒë·∫ßu t·ª± ƒë·ªông ƒëi·ªÅn form');
console.log('   - autoFormFiller.stopAutoFill(): D·ª´ng auto fill');
console.log('   - autoFormFiller.checkFormStatus(): Ki·ªÉm tra tr·∫°ng th√°i form');
console.log('   - autoFormFiller.fixValidationErrors(): T·ª± ƒë·ªông s·ª≠a l·ªói validation');